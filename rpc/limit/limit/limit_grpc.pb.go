// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: limit.proto

package limit

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LimitClient is the client API for Limit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LimitClient interface {
	IsLimit(ctx context.Context, in *LimitReq, opts ...grpc.CallOption) (*LimitResp, error)
}

type limitClient struct {
	cc grpc.ClientConnInterface
}

func NewLimitClient(cc grpc.ClientConnInterface) LimitClient {
	return &limitClient{cc}
}

func (c *limitClient) IsLimit(ctx context.Context, in *LimitReq, opts ...grpc.CallOption) (*LimitResp, error) {
	out := new(LimitResp)
	err := c.cc.Invoke(ctx, "/limit.Limit/IsLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LimitServer is the server API for Limit service.
// All implementations must embed UnimplementedLimitServer
// for forward compatibility
type LimitServer interface {
	IsLimit(context.Context, *LimitReq) (*LimitResp, error)
	mustEmbedUnimplementedLimitServer()
}

// UnimplementedLimitServer must be embedded to have forward compatible implementations.
type UnimplementedLimitServer struct {
}

func (UnimplementedLimitServer) IsLimit(context.Context, *LimitReq) (*LimitResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsLimit not implemented")
}
func (UnimplementedLimitServer) mustEmbedUnimplementedLimitServer() {}

// UnsafeLimitServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LimitServer will
// result in compilation errors.
type UnsafeLimitServer interface {
	mustEmbedUnimplementedLimitServer()
}

func RegisterLimitServer(s grpc.ServiceRegistrar, srv LimitServer) {
	s.RegisterService(&Limit_ServiceDesc, srv)
}

func _Limit_IsLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LimitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LimitServer).IsLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/limit.Limit/IsLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LimitServer).IsLimit(ctx, req.(*LimitReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Limit_ServiceDesc is the grpc.ServiceDesc for Limit service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Limit_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "limit.Limit",
	HandlerType: (*LimitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsLimit",
			Handler:    _Limit_IsLimit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "limit.proto",
}
